<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ts.clerk.oauth.dao.mapper.RoleMapper">
    <resultMap id="roleResultMap" type="RoleDO">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="display_name" property="displayName" jdbcType="VARCHAR"/>
        <result column="gmt_created" property="gmtCreated" jdbcType="TIMESTAMP"/>
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP"/>
        <association property="operator" column="operator_id" javaType="UserDO">
            <id property="id" column="operator_id"/>
            <result property="username" column="operator_username"/>
        </association>
        <collection property="permissions" ofType="AuthorityDO">
            <id property="id" column="a_id"/>
            <result property="name" column="a_name"/>
            <result property="displayName" column="a_display_name"/>
            <result property="parent" column="parent"/>
            <result property="resourceUrl" column="resource_url"/>
        </collection>
    </resultMap>

    <resultMap id="roleSimpleMap" type="RoleDO">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="display_name" property="displayName" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="query" parameterType="com.ts.clerk.oauth.pojo.query.RoleQuery" resultMap="roleResultMap">
        select r.*,u.username operator_username
        from `clerk-oauth`.role r left join `clerk-oauth`.user u on r.operator_id=u.id
        <where>
            <if test="name!=null">
                and r.name=#{name}
            </if>
        </where>
    </select>

    <select id="all" resultMap="roleSimpleMap">
        select id, name
        from `clerk-oauth`.role
    </select>

    <select id="queryByUserId" resultMap="roleResultMap">
        select r.*
        from `clerk-oauth`.role r
                 left join `clerk-oauth`.user_role ur on r.id = ur.role_id
        where ur.user_id = #{userId}
    </select>

    <select id="getById" resultMap="roleResultMap">
        select r.*, a.id a_id, a.name a_name, a.display_name a_display_name, a.parent, a.resource_url
        from `clerk-oauth`.role r
                 left join `clerk-oauth`.role_authority ra on r.id = ra.role_id
                 left join `clerk-oauth`.authority a on ra.authority_id = a.id
        where r.id = #{id}
    </select>

    <insert id="insert" parameterType="RoleDO" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `clerk-oauth`.role (name, display_name, operator_id, gmt_created, gmt_modified)
        values (#{name}, #{displayName}, #{operatorId}, #{gmtCreated}, #{gmtModified})
    </insert>

    <update id="update" parameterType="RoleDO">
        update `clerk-oauth`.role
        <set>
            <if test="name!=null">
                name=#{name},
            </if>
            <if test="operatorId!=null">
                operator_id=#{operatorId},
            </if>
            <if test="displayName!=null">
                display_name=#{displayName},
            </if>
            <if test="gmtModified!=null">
                gmt_modified=#{gmtModified},
            </if>
        </set>
        where id=#{id}
    </update>
    <delete id="delete">
        delete
        from `clerk-oauth`.role
        where id = #{id}
    </delete>

    <insert id="batchInsertRoleAuthority" parameterType="RoleAuthorityDO">
        insert into `clerk-oauth`.role_authority (role_id, authority_id, gmt_created, gmt_modified)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.roleId}, #{item.authorityId}, #{item.gmtCreated}, #{item.gmtModified})
        </foreach>
    </insert>
    <delete id="deleteRoleAuthorityByRoleId">
        delete
        from `clerk-oauth`.role_authority
        where role_id = #{roleId}
    </delete>
</mapper>